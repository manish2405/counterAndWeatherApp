{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/weather/weather.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction WeatherComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"span\", 8);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_9_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const location_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.refreshWeather(location_r2));\n    });\n    i0.ɵɵtext(4, \"Refresh\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_9_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.removeCity(i_r3));\n    });\n    i0.ɵɵtext(6, \"X\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const location_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r2.city);\n  }\n}\nfunction WeatherComponent_div_13_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const forecast_r9 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 2, forecast_r9.date, \"d E\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(forecast_r9.temperature);\n  }\n}\nfunction WeatherComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_13_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const location_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.refreshWeather(location_r7));\n    });\n    i0.ɵɵtext(12, \"Refresh Forecast\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 9);\n    i0.ɵɵtemplate(14, WeatherComponent_div_13_div_14_Template, 6, 5, \"div\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const location_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r7.city);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r7.temperature);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r7.weatherStatus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Wind: \", location_r7.wind, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Pressure: \", location_r7.pressure, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", location_r7.forecast);\n  }\n}\nexport class WeatherComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.city = '';\n    this.recentLocations = [];\n  }\n  removeCity(index) {\n    this.recentLocations.splice(index, 1);\n  }\n  clearAll() {\n    this.recentLocations = [];\n  }\n  trimLocations() {\n    if (this.recentLocations.length > 8) {\n      this.recentLocations.pop();\n    }\n  }\n  refreshForecast() {\n    // Call forecast API for the selected location\n    // Update the right panel with detailed weather information and 5-day forecast\n  }\n  addCity() {\n    this.weatherService.getCurrentWeather(this.city).subscribe(response => {\n      let newLocation = {\n        city: response.name,\n        temperature: `${response.main.temp}°C`,\n        weatherStatus: response.weather[0].description,\n        wind: `${response.wind.speed} m/s`,\n        pressure: `${response.main.pressure} hPa`\n      };\n      this.recentLocations.unshift(newLocation);\n      this.trimLocations();\n      this.city = '';\n      const lat = response.coord.lat;\n      const lon = response.coord.lon;\n      this.weatherService.getWeatherForecast(lat, lon).subscribe(forecastResponse => {\n        // Assuming that the next 5 days' temperatures are available in the 'daily' array\n        const nextFiveDays = forecastResponse.daily.slice(1, 6);\n        newLocation['forecast'] = nextFiveDays.map(day => ({\n          date: new Date(day.dt * 1000),\n          temperature: `${day.temp.day}°C`,\n          weatherStatus: day.weather[0].description,\n          wind: `${day.wind_speed} m/s`,\n          pressure: `${day.pressure} hPa`\n        }));\n      }, error => {\n        console.error('Error fetching weather forecast:', error);\n      });\n    }, error => {\n      console.error('Error fetching current weather data:', error);\n      // Handle error, show error message to the user\n    });\n  }\n\n  refreshWeather(location) {\n    this.weatherService.getCurrentWeather(location.city).subscribe(response => {\n      location.temperature = `${response.main.temp}°C`;\n      location.weatherStatus = response.weather[0].description;\n    }, error => {\n      console.error('Error refreshing weather data:', error);\n      // Handle error, show error message to the user\n    });\n  }\n  static #_ = this.ɵfac = function WeatherComponent_Factory(t) {\n    return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherComponent,\n    selectors: [[\"app-weather\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[1, \"weather-app\"], [1, \"left-panel\"], [1, \"location-search\"], [\"placeholder\", \"Enter City\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"class\", \"location-search\", 4, \"ngFor\", \"ngForOf\"], [1, \"right-panel\"], [4, \"ngFor\", \"ngForOf\"], [1, \"location\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\"]],\n    template: function WeatherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function WeatherComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.city = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_4_listener() {\n          return ctx.addCity();\n        });\n        i0.ɵɵtext(5, \"+\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7, \"Recent locations \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"hr\");\n        i0.ɵɵtemplate(9, WeatherComponent_div_9_Template, 7, 1, \"div\", 5);\n        i0.ɵɵelementStart(10, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_10_listener() {\n          return ctx.clearAll();\n        });\n        i0.ɵɵtext(11, \"Clear All\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵtemplate(13, WeatherComponent_div_13_Template, 15, 6, \"div\", 7);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.city);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.recentLocations);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.recentLocations);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DatePipe],\n    styles: [\".weather-app[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\n.left-panel[_ngcontent-%COMP%] {\\n  margin: 20px;\\n  width: 30%;\\n  padding: 20px;\\n  border: 2px solid #ccc;\\n}\\n\\n.right-panel[_ngcontent-%COMP%] {\\n  width: 60%;\\n  margin: 20px;\\n  padding: 20px;\\n  border: 2px solid #ccc;\\n}\\n\\n.location-search[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  padding: 10px;\\n}\\n.location-search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  width: 90%;\\n  border: none;\\n  box-shadow: 13px 13px 0px -10px #ccc, -13px 13px 0px -10px #ccc;\\n  outline: none;\\n  font-size: 20px;\\n  background: none;\\n}\\n.location-search[_ngcontent-%COMP%]   .location[_ngcontent-%COMP%] {\\n  width: 80%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvd2VhdGhlci93ZWF0aGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLFVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxhQUFBO0FBQ0Y7QUFDRTtFQUNFLFVBQUE7RUFDQSxZQUFBO0VBQ0EsK0RBQUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0FBQ0o7QUFFRTtFQUNFLFVBQUE7QUFBSiIsInNvdXJjZXNDb250ZW50IjpbIi53ZWF0aGVyLWFwcCB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5sZWZ0LXBhbmVsIHtcbiAgbWFyZ2luOiAyMHB4O1xuICB3aWR0aDogMzAlO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xufVxuXG4ucmlnaHQtcGFuZWwge1xuICB3aWR0aDogNjAlO1xuICBtYXJnaW46IDIwcHg7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkICNjY2M7XG59XG5cbi5sb2NhdGlvbi1zZWFyY2h7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMTBweDtcblxuICBpbnB1dHtcbiAgICB3aWR0aDogOTAlO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3gtc2hhZG93OiAxM3B4IDEzcHggMHB4IC0xMHB4ICNjY2MsIC0xM3B4IDEzcHggMHB4IC0xMHB4ICNjY2M7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgYmFja2dyb3VuZDogbm9uZTtcbiAgfVxuXG4gIC5sb2NhdGlvbntcbiAgICB3aWR0aDogODAlO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","WeatherComponent","constructor","weatherService","removeCity","index","recentLocations","splice","clearAll","trimLocations","length","pop","refreshForecast","addCity","getCurrentWeather","city","subscribe","response","newLocation","name","temperature","main","temp","weatherStatus","weather","description","wind","speed","pressure","unshift","lat","coord","lon","getWeatherForecast","forecastResponse","nextFiveDays","daily","slice","map","day","date","Date","dt","wind_speed","error","console","refreshWeather","location","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/manish/Documents/project/angular-task/src/app/weather/weather.component.html","/home/manish/Documents/project/angular-task/src/app/weather/weather.component.ts"],"sourcesContent":["<!-- weather-app.component.html -->\n<div class=\"weather-app\">\n  <div class=\"left-panel\">\n    <div class=\"location-search\">\n      <input [(ngModel)]=\"city\" placeholder=\"Enter City\" />\n      <button (click)=\"addCity()\">+</button>\n    </div>\n    <p>Recent locations </p>\n    <hr>\n    <div class=\"location-search\" *ngFor=\"let location of recentLocations; let i = index\">\n      <span class=\"location\">{{ location.city }}</span>\n      <button (click)=\"refreshWeather(location)\">Refresh</button>\n      <button (click)=\"removeCity(i)\">X</button>\n    </div>\n    <button (click)=\"clearAll()\">Clear All</button>\n  </div>\n  <div class=\"right-panel\">\n    <div *ngFor=\"let location of recentLocations\">\n      <h2>{{ location.city }}</h2>\n      <p>{{ location.temperature }}</p>\n      <p>{{ location.weatherStatus }}</p>\n      <p>Wind: {{ location.wind }}</p>\n      <p>Pressure: {{ location.pressure }}</p>\n      <button (click)=\"refreshWeather(location)\">Refresh Forecast</button>\n\n      <div style=\"display: flex;justify-content: space-between;\">\n        <div *ngFor=\"let forecast of location.forecast\">\n         <p>{{ forecast.date | date:'d E' }}</p>\n          <p>{{ forecast.temperature }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { WeatherService } from '../services/weather/weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.scss']\n})\nexport class WeatherComponent {\n\n  city: string = '';\n  recentLocations: any[] = [];\n  selectedLocation: any;\n\n  constructor(private weatherService: WeatherService) {}\n\n\n  removeCity(index: number) {\n    this.recentLocations.splice(index, 1);\n  }\n\n  clearAll() {\n    this.recentLocations = [];\n  }\n\n  trimLocations() {\n    if (this.recentLocations.length > 8) {\n      this.recentLocations.pop();\n    }\n  }\n\n  refreshForecast() {\n    // Call forecast API for the selected location\n    // Update the right panel with detailed weather information and 5-day forecast\n  }\n\n  addCity() {\n    this.weatherService.getCurrentWeather(this.city).subscribe(\n      (response: any) => {\n        let newLocation:any = {\n          city: response.name,\n          temperature: `${response.main.temp}°C`,\n          weatherStatus: response.weather[0].description,\n          wind: `${response.wind.speed} m/s`,\n          pressure: `${response.main.pressure} hPa`,\n        };\n        this.recentLocations.unshift(newLocation);\n        this.trimLocations();\n        this.city = '';\n\n        const lat = response.coord.lat;\n        const lon = response.coord.lon;\n        this.weatherService.getWeatherForecast(lat, lon).subscribe(\n          (forecastResponse: any) => {\n            // Assuming that the next 5 days' temperatures are available in the 'daily' array\n            const nextFiveDays = forecastResponse.daily.slice(1, 6);\n            newLocation['forecast'] = nextFiveDays.map((day: any) => ({\n              date: new Date(day.dt * 1000),\n              temperature: `${day.temp.day}°C`,\n              weatherStatus: day.weather[0].description,\n              wind: `${day.wind_speed} m/s`,\n              pressure: `${day.pressure} hPa`,\n            }));\n          },\n          (error) => {\n            console.error('Error fetching weather forecast:', error);\n          }\n        );\n      },\n      (error) => {\n        console.error('Error fetching current weather data:', error);\n        // Handle error, show error message to the user\n      }\n    );\n  }\n\n  refreshWeather(location: any) {\n    this.weatherService.getCurrentWeather(location.city).subscribe(\n      (response: any) => {\n        location.temperature = `${response.main.temp}°C`;\n        location.weatherStatus = response.weather[0].description;\n      },\n      (error) => {\n        console.error('Error refreshing weather data:', error);\n        // Handle error, show error message to the user\n      }\n    );\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
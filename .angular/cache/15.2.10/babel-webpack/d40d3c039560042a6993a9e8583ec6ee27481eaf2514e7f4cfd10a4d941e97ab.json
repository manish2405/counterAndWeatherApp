{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/weather/weather.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction WeatherComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"span\", 8);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_9_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const location_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.refreshWeather(location_r2));\n    });\n    i0.ɵɵtext(4, \"Refresh\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_9_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.removeCity(i_r3));\n    });\n    i0.ɵɵtext(6, \"X\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const location_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r2.city);\n  }\n}\nfunction WeatherComponent_div_13_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const forecast_r9 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 2, forecast_r9.date, \"d E\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(forecast_r9.temperature);\n  }\n}\nfunction WeatherComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_13_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const location_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.refreshWeather(location_r7));\n    });\n    i0.ɵɵtext(12, \"Refresh Forecast\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 9);\n    i0.ɵɵtemplate(14, WeatherComponent_div_13_div_14_Template, 6, 5, \"div\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const location_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r7.city);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r7.temperature);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(location_r7.weatherStatus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Wind: \", location_r7.wind, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Pressure: \", location_r7.pressure, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", location_r7.forecast);\n  }\n}\nexport let WeatherComponent = /*#__PURE__*/(() => {\n  class WeatherComponent {\n    constructor(weatherService) {\n      this.weatherService = weatherService;\n      this.city = '';\n      this.recentLocations = [];\n    }\n    removeCity(index) {\n      this.recentLocations.splice(index, 1);\n    }\n    clearAll() {\n      this.recentLocations = [];\n    }\n    trimLocations() {\n      if (this.recentLocations.length > 8) {\n        this.recentLocations.pop();\n      }\n    }\n    refreshForecast() {\n      // Call forecast API for the selected location\n      // Update the right panel with detailed weather information and 5-day forecast\n    }\n    addCity() {\n      this.weatherService.getCurrentWeather(this.city).subscribe(response => {\n        let newLocation = {\n          city: response.name,\n          temperature: `${response.main.temp}°C`,\n          weatherStatus: response.weather[0].description,\n          wind: `${response.wind.speed} m/s`,\n          pressure: `${response.main.pressure} hPa`\n        };\n        this.recentLocations.unshift(newLocation);\n        this.trimLocations();\n        this.city = '';\n        const lat = response.coord.lat;\n        const lon = response.coord.lon;\n        this.weatherService.getWeatherForecast(lat, lon).subscribe(forecastResponse => {\n          // Assuming that the next 5 days' temperatures are available in the 'daily' array\n          const nextFiveDays = forecastResponse.daily.slice(1, 6);\n          newLocation['forecast'] = nextFiveDays.map(day => ({\n            date: new Date(day.dt * 1000),\n            temperature: `${day.temp.day}°C`,\n            weatherStatus: day.weather[0].description,\n            wind: `${day.wind_speed} m/s`,\n            pressure: `${day.pressure} hPa`\n          }));\n        }, error => {\n          console.error('Error fetching weather forecast:', error);\n        });\n      }, error => {\n        console.error('Error fetching current weather data:', error);\n        // Handle error, show error message to the user\n      });\n    }\n\n    refreshWeather(location) {\n      this.weatherService.getCurrentWeather(location.city).subscribe(response => {\n        location.temperature = `${response.main.temp}°C`;\n        location.weatherStatus = response.weather[0].description;\n      }, error => {\n        console.error('Error refreshing weather data:', error);\n        // Handle error, show error message to the user\n      });\n    }\n    static #_ = this.ɵfac = function WeatherComponent_Factory(t) {\n      return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: WeatherComponent,\n      selectors: [[\"app-weather\"]],\n      decls: 14,\n      vars: 3,\n      consts: [[1, \"weather-app\"], [1, \"left-panel\"], [1, \"location-search\"], [\"placeholder\", \"Enter City\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"class\", \"location-search\", 4, \"ngFor\", \"ngForOf\"], [1, \"right-panel\"], [4, \"ngFor\", \"ngForOf\"], [1, \"location\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\"]],\n      template: function WeatherComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"input\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function WeatherComponent_Template_input_ngModelChange_3_listener($event) {\n            return ctx.city = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_4_listener() {\n            return ctx.addCity();\n          });\n          i0.ɵɵtext(5, \"+\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"p\");\n          i0.ɵɵtext(7, \"Recent locations \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"hr\");\n          i0.ɵɵtemplate(9, WeatherComponent_div_9_Template, 7, 1, \"div\", 5);\n          i0.ɵɵelementStart(10, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_10_listener() {\n            return ctx.clearAll();\n          });\n          i0.ɵɵtext(11, \"Clear All\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\", 6);\n          i0.ɵɵtemplate(13, WeatherComponent_div_13_Template, 15, 6, \"div\", 7);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.city);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.recentLocations);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.recentLocations);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DatePipe],\n      styles: [\".weather-app[_ngcontent-%COMP%]{display:flex}.left-panel[_ngcontent-%COMP%]{margin:20px;width:30%;padding:20px;border:2px solid #ccc}.right-panel[_ngcontent-%COMP%]{width:60%;margin:20px;padding:20px;border:2px solid #ccc}.location-search[_ngcontent-%COMP%]{display:flex;justify-content:space-between;padding:10px}.location-search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:90%;border:none;box-shadow:13px 13px 0 -10px #ccc,-13px 13px 0 -10px #ccc;outline:none;font-size:20px;background:none}.location-search[_ngcontent-%COMP%]   .location[_ngcontent-%COMP%]{width:80%}\"]\n    });\n  }\n  return WeatherComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}